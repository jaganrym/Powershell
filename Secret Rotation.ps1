# Import necessary modulesImport-Module ActiveDirectoryImport-Module Az.KeyVault
function Rotate-Secret {    param (        [Parameter(Mandatory=$true)]        [string]$Log,        [Parameter(Mandatory=$true)]        [string]$SecretName,        [Parameter(Mandatory=$true)]        [string]$KeyVaultName    )
# Retrieve Current Secret    $kvUri = "https://$KeyVaultName.vault.azure.net"    $secret = Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $SecretName    Write-Output "Secret Info Retrieved"
# Retrieve Secret Info    $credentialId = $secret.Tags["CredentialId"]    $providerAddress = $secret.Tags["ProviderAddress"]    $validityPeriodDays = $secret.Tags["ValidityPeriodDays"]    Write-Output "Provider Address: $providerAddress"    Write-Output "Credential Id: $credentialId"
# Check Active Directory connection    Check-ADConnection -Secret $secret    Write-Output "Active Directory Connection Validated"
# Create new password    $randomPassword = Create-RandomPassword    Write-Output "New Password Generated"
# Add secret version with new password to Key Vault    Create-NewSecretVersion -Client $client -Secret $secret -NewPassword $randomPassword    Write-Output "New Secret Version Generated"
# Update Active Directory account with new password    Update-ADPassword -Secret $secret -NewPassword $randomPassword    Write-Output "Password Changed"    Write-Output "Secret Rotated Successfully"}
function Check-ADConnection {    param (        [Parameter(Mandatory=$true)]        [PSObject]$Secret    )
$context = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain, "YOUR_DOMAIN")    if (-not $context.ValidateCredentials($Secret.Name, $Secret.SecretValueText)) {        throw "Active Directory connection failed."    }}
function Update-ADPassword {    param (        [Parameter(Mandatory=$true)]        [PSObject]$Secret,        [Parameter(Mandatory=$true)]        [string]$NewPassword    )
$context = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain, "YOUR_DOMAIN")    $user = [System.DirectoryServices.AccountManagement.UserPrincipal]::FindByIdentity($context, $Secret.Name)    if ($user) {        $user.SetPassword($NewPassword)        $user.Save()    } else {        throw "User not found in Active Directory."    }}
function Create-RandomPassword {    $validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()"    $random = New-Object System.Random    $chars = -join ((1..12) | ForEach-Object { $validChars[$random.Next(0, $validChars.Length)] })    return $chars}
function Create-NewSecretVersion {    param (        [Parameter(Mandatory=$true)]        [PSObject]$Client,        [Parameter(Mandatory=$true)]        [PSObject]$Secret,        [Parameter(Mandatory=$true)]        [string]$NewPassword    )
$newSecret = New-Object -TypeName Microsoft.Azure.KeyVault.Models.SecretBundle    $newSecret.SecretIdentifier = $Secret.SecretIdentifier    $newSecret.Value = $NewPassword    $newSecret.Tags = $Secret.Tags    Set-AzKeyVaultSecret -VaultName $Secret.VaultName -Name $Secret.Name -SecretValue $NewPassword -Tags $Secret.Tags}
# Example usageRotate-Secret -Log "YourLog" -SecretName "YourSecretName" -KeyVaultName "YourKeyVaultName"
